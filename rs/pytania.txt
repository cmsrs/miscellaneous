pyt. rekrutacyjne:

------pytania miekkie---------

0. powiedz cos o sobie - cv
od ilu lat programujesz?
i głownie w czym?
jak zdobywasz wiedze?

1. jakiego ide uzywasz?

2. jakiego systemu operacyjnego uzywasz?

3. jaki wolisz istniejacy kod czy razczej wolisz od początku aplikację programować?

4. czy wolisz programowac front czy backend?

5. wolisz pracować zespołowo, czy samemu?

------pytania szczegółowe---------

5. pytanie z git-a
- jak sprawdzasz istniejaca galaz
- co to jest cherry-pick?
- co to jest merge - wytlumacz jak to sie uzywa

6. co to jest wsdl?

7. zasada:
-dry
-kiss
Co Ci mowią te skróty?

8. jakie sa różnice modyfikatorów protected public private przed metoda

9. 'composer install' od 'composer update' - jakie roznice

10. jak wyszukac slowa 'text' w basu w konsoli (we wszystkich plikach) z pominieciem slowa 'storage'
$ grep -r  'text' | grep -v 'storage'

11. istniejacy kod - review (patrz nizej)
Dostajesz istniejacy kod:

Czy widzis jakieś w nim bledy? - czy jest ok wg Ciebie?

Glowne bledy:
- brak walidacji danych po stronie serwera (pytanie pomocnicze: po co walidowac te dane skoro w html-u zostalo to juz zrobione?)
- wszystko w kontrolerze - powinno byc w modelach, czemu? (bo tatwiej sie testuje i jest to kluczowa zasada wzorca MVC)
- w petli zapytania nie sa optymalnie w metodzie show

Pytania pomocnicze
- czy pisales testy? 
- czy testy jednostkowe w.g. Ciebie maja sens? (bo przeciez nie ma czasu na robienie testow)
- jak debagujesz kod? (czy używasz xDebug-a?)
- co robisz z bledami, ktore znalazles? (zakladajac ze w danej chwili masz o wiele wazniejsze rzeczy do zrobienia)
- jaki bys chcial zastac kod jakbys przejmowal od kogos innego? (dokumentacja testy manulane i automatycznre)

12.
$cat test.js:
var a = {'a':1, 'b':2};
var b = a;
b.c = 3;
console.log(a);

co zwrocili polecenie:
$nodejs test.js
i czemu? 
pyt pomocnicze: co zrobić, aby w zmiennej 'a' byly tylko bazowe dane?



13. na koniec wysylamy te same zadanie rekrutacyjne ktore ja dostalem




<?php 
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Project;
use App\Models\Task;


class ProjectsAndTasks extends Controller {

	/**
	 * zapis do bazy danych projekow i nalezacych do nich 'taskow'
	 * przykladowe dane z posta:
	 * [
	 *	[
	 *		'title' => 'Konfiguracja serwera',
	 *		'tasks' => [
	 *			[ 'name' => 'Instalacja nginix-a', 'points' => 2 ],
	 *			[ 'name' => 'Dodanie ssl-a', 'points' => 6 ],                
	 *		]
	 *	],
	 *];
	 */
	public function add( Request $request )
	{
		$post = $request->all();

		foreach($post as $project){			
			$objProject = Project::create(['title' => $project['title'] ]);
			foreach($project['tasks'] as $task ){
				Task::create([
					'name' => $task['name'],
					'points' => $task['points'],
					'project_id'=> $objProject->id
					]);		
			}
		}
		return redirect()->route('show');
	}		

	/**
	 * wyswietlenie wszystkich projektow i nalezacych do nich 'taskow'
	 */
	public function show()
	{
		$show = [];
		$projects = Project::all();
		$i = 0;
		foreach($projects as $project){
			$show[$i]['title'] = $project->title;
			$show[$i]['tasks'] = Task::where('project_id', '=', $project->id)->get()->toArray();
			$i++;
		}
		return view('projectsandtasks', [ 'show' => $show] );
	}
  
}

